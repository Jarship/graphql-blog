scalar Upload

type Query {
  active: String!
  feed: Feed!
  profile (url: String!): User!
  blog(id: ID!): BlogPost
  unPublished: [BlogPost!]!
  getUser: User!
}

type BlogPost {
  id: ID!
  title: String!
  post: String!
  author: User!
  editors: [User!]!
}

type Feed {
  blogs: [BlogPost!]!
  count: Int!
  error: Error
}

type User {
  id: ID
  name: String
  email: String
  url: String
  photo: String
  posts: [BlogPost!]
  status: String
  invitations: [String!]
  error: Error
}

type AuthPayload {
  token: String
  user: User
  error: Error
}

type Invite {
  invite: String
  error: Error
}

type Error {
  name: String!
  message: String!
}

type UploadResult {
  photoUrl: String
  error: Error
}

type Mutation {
  signInUser (email: String!, password: String!): AuthPayload!
  createUser (email: String!, name: String!, password: String!): AuthPayload!
  createInvite: Invite!
  expireInvite (invite: String!): Invite!
  markVisitor (ipAddress: String!): Boolean!
  logError (message: String!, location: String!, status: String!): Boolean!
  uploadProfilePicture (picture: Upload!): UploadResult!
}